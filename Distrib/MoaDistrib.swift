//
// Image downloader for iOS/Swift.
//
// https://github.com/evgenyneu/Moa
//
// This file was automatically generated by combining multiple Swift source files.
//


// ----------------------------
//
// Moa.swift
//
// ----------------------------

//
// Downloads an image by url.
//
// Example
// -------
//
//   let moa = Moa()
//   moa.onSuccessAsync = { image in
//     return image
//   }
//   moa.url = "http://site.com/moa.jpg"
//

import UIKit

public final class Moa {
  private var imageDownloader: MoaImageDownloader?
  private weak var imageView: UIImageView?

  public init() { }

  init(imageView: UIImageView) {
    self.imageView = imageView
  }

  public var url: String? {
    didSet {
      cancel()

      if let url = url {
        startDownload(url)
      }
    }
  }

  public var onSuccessAsync: ((UIImage)->(UIImage?))?
  public var onErrorAsync: ((NSError, NSHTTPURLResponse?)->())?

  public func cancel() {
    imageDownloader?.cancel()
    imageDownloader = nil
  }

  private func startDownload(url: String) {
    cancel()
    imageDownloader = MoaImageDownloader()

    imageDownloader?.startDownload(url,
      onSuccess: { [weak self] image in
        self?.onHandleSuccess(image)
      },
      onError: { [weak self] error, response in
        self?.onErrorAsync?(error, response)
      }
    )
  }

  private func onHandleSuccess(image: UIImage) {
    var imageForView: UIImage? = image

    if let onSuccessAsync = onSuccessAsync {
      imageForView = onSuccessAsync(image)
    }

    if let imageView = imageView {
      dispatch_async(dispatch_get_main_queue()) {
        imageView.image = imageForView
      }
    }
  }
}


// ----------------------------
//
// MoaHttp.swift
//
// ----------------------------

//
// Shortcut function for creating NSURLSessionDataTask.
//

import UIKit

struct MoaHttp {
  static func createDataTask(url: String,
    onSuccess: (NSData, NSHTTPURLResponse)->(),
    onError: (NSError, NSHTTPURLResponse?)->()) -> NSURLSessionDataTask? {

    if let nsUrl = NSURL(string: url) {
      return createDataTask(nsUrl, onSuccess: onSuccess, onError: onError)
    }

    // Error converting string to NSURL
    onError(MoaHttpErrors.InvalidUrlString.new, nil)
    return nil
  }

  private static func createDataTask(nsUrl: NSURL,
    onSuccess: (NSData, NSHTTPURLResponse)->(),
    onError: (NSError, NSHTTPURLResponse?)->()) -> NSURLSessionDataTask? {

    return NSURLSession.sharedSession().dataTaskWithURL(nsUrl) { (data, response, error) in
      if let httpResponse = response as? NSHTTPURLResponse {
        if error == nil {
          onSuccess(data, httpResponse)
        } else {
          onError(error, httpResponse)
        }
      } else {
        onError(error, nil)
      }
    }
  }
}


// ----------------------------
//
// MoaHttpErrors.swift
//
// ----------------------------

//
// Codes for http errors
//

import Foundation

public enum MoaHttpErrors: Int {
  case InvalidUrlString = -1

  var new: NSError {
    return NSError(domain: "MoaHttpErrorDomain", code: rawValue, userInfo: nil)
  }
}


// ----------------------------
//
// MoaHttpImage.swift
//
// ----------------------------

//
// Helper functions for downloading an image and processing the response.
//

import UIKit

struct MoaHttpImage {
  static func createDataTask(url: String,
    onSuccess: (UIImage)->(),
    onError: (NSError, NSHTTPURLResponse?)->()) -> NSURLSessionDataTask? {

    return MoaHttp.createDataTask(url,
      onSuccess: { data, response in
        self.handleSuccess(data, response: response, onSuccess: onSuccess, onError: onError)
      },
      onError: onError
    )
  }

  static func handleSuccess(data: NSData,
    response: NSHTTPURLResponse,
    onSuccess: (UIImage)->(),
    onError: (NSError, NSHTTPURLResponse?)->()) {

    // Show error if response code is not 200
    if response.statusCode != 200 {
      onError(MoaHttpImageErrors.HttpStatusCodeIsNot200.new, response)
      return
    }

    // Ensure response has the valid MIME type
    if let mimeType = response.MIMEType {
      if !validMimeType(mimeType) {
        // Not an image Content-Type http header
        let error = MoaHttpImageErrors.NotAnImageContentTypeInResponseHttpHeader.new
        onError(error, response)
        return
      }
    } else {
      // Missing Content-Type http header
      let error = MoaHttpImageErrors.MissingResponseContentTypeHttpHeader.new
      onError(error, response)
      return
    }

    if let image = UIImage(data: data) {
      onSuccess(image)
    } else {
      // Failed to convert response data to UIImage
      let error = MoaHttpImageErrors.FailedToReadImageData.new
      onError(error, response)
    }
  }

  private static func validMimeType(mimeType: String) -> Bool {
    let validMimeTypes = ["image/jpeg", "image/pjpeg", "image/png"]
    return contains(validMimeTypes, mimeType)
  }
}


// ----------------------------
//
// MoaHttpImageErrors.swift
//
// ----------------------------

//
// Codes for image download errors
//

import Foundation

public enum MoaHttpImageErrors: Int {
  // Response HTTP status code is not 200
  case HttpStatusCodeIsNot200 = -1

  // Response is missing Content-Type http header
  case MissingResponseContentTypeHttpHeader = -2

  // Response Content-Type http header is not an image type
  case NotAnImageContentTypeInResponseHttpHeader = -3

  // Failed to convert reponse data to UIImage
  case FailedToReadImageData = -4

  var new: NSError {
    return NSError(domain: "MoaHttpImageErrorDomain", code: rawValue, userInfo: nil)
  }
}


// ----------------------------
//
// MoaImageDownloader.swift
//
// ----------------------------

import UIKit

final class MoaImageDownloader {
  var task: NSURLSessionDataTask?
  var cancelled = false

  deinit {
    cancel()
  }

  func startDownload(url: String, onSuccess: (UIImage)->(),
    onError: (NSError, NSHTTPURLResponse?)->()) {

    cancelled = false

    task = MoaHttpImage.createDataTask(url,
      onSuccess: onSuccess,
      onError: { [weak self] error, response in
        if let currentSelf = self
          where !currentSelf.cancelled { // Do not report error if task was manually cancelled

          onError(error, response)
        }
      }
    )

    task?.resume()
  }

  func cancel() {
    task?.cancel()
    cancelled = true
  }
}


// ----------------------------
//
// UIImageView+moa.swift
//
// ----------------------------

//
// UIImageView extension for downloading image.
//
// Example
// -------
//
//   let imageView = UIImageView()
//   imageView.moa.url = "http://site.com/moa.jpg"
//

import UIKit

private var xoAssociationKey: UInt8 = 0

public extension UIImageView {
  public var moa: Moa {
    get {
      if let value = objc_getAssociatedObject(self, &xoAssociationKey) as? Moa {
        return value
      } else {
        let moa = Moa(imageView: self)
        objc_setAssociatedObject(self, &xoAssociationKey, moa, objc_AssociationPolicy(OBJC_ASSOCIATION_RETAIN))
        return moa
      }
    }

    set {
      objc_setAssociatedObject(self, &xoAssociationKey, newValue, objc_AssociationPolicy(OBJC_ASSOCIATION_RETAIN))
    }
  }
}


